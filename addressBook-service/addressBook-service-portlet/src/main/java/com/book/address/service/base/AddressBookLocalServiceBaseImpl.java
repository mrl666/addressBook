package com.book.address.service.base;

import com.book.address.model.AddressBook;
import com.book.address.service.AddressBookLocalService;
import com.book.address.service.persistence.AddressBookPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.liferay.portlet.asset.service.persistence.AssetEntryPersistence;
import com.liferay.portlet.asset.service.persistence.AssetTagPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the address book local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.book.address.service.impl.AddressBookLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.book.address.service.impl.AddressBookLocalServiceImpl
 * @see com.book.address.service.AddressBookLocalServiceUtil
 * @generated
 */
public abstract class AddressBookLocalServiceBaseImpl
    extends BaseLocalServiceImpl implements AddressBookLocalService,
        IdentifiableBean {
    @BeanReference(type = com.book.address.service.AddressBookLocalService.class)
    protected com.book.address.service.AddressBookLocalService addressBookLocalService;
    @BeanReference(type = com.book.address.service.AddressBookService.class)
    protected com.book.address.service.AddressBookService addressBookService;
    @BeanReference(type = AddressBookPersistence.class)
    protected AddressBookPersistence addressBookPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    @BeanReference(type = com.liferay.portlet.asset.service.AssetEntryLocalService.class)
    protected com.liferay.portlet.asset.service.AssetEntryLocalService assetEntryLocalService;
    @BeanReference(type = com.liferay.portlet.asset.service.AssetEntryService.class)
    protected com.liferay.portlet.asset.service.AssetEntryService assetEntryService;
    @BeanReference(type = AssetEntryPersistence.class)
    protected AssetEntryPersistence assetEntryPersistence;
    @BeanReference(type = com.liferay.portlet.asset.service.AssetTagLocalService.class)
    protected com.liferay.portlet.asset.service.AssetTagLocalService assetTagLocalService;
    @BeanReference(type = com.liferay.portlet.asset.service.AssetTagService.class)
    protected com.liferay.portlet.asset.service.AssetTagService assetTagService;
    @BeanReference(type = AssetTagPersistence.class)
    protected AssetTagPersistence assetTagPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private AddressBookLocalServiceClpInvoker _clpInvoker = new AddressBookLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.book.address.service.AddressBookLocalServiceUtil} to access the address book local service.
     */

    /**
     * Adds the address book to the database. Also notifies the appropriate model listeners.
     *
     * @param addressBook the address book
     * @return the address book that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public AddressBook addAddressBook(AddressBook addressBook)
        throws SystemException {
        addressBook.setNew(true);

        return addressBookPersistence.update(addressBook);
    }

    /**
     * Creates a new address book with the primary key. Does not add the address book to the database.
     *
     * @param addressBookId the primary key for the new address book
     * @return the new address book
     */
    @Override
    public AddressBook createAddressBook(long addressBookId) {
        return addressBookPersistence.create(addressBookId);
    }

    /**
     * Deletes the address book with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param addressBookId the primary key of the address book
     * @return the address book that was removed
     * @throws PortalException if a address book with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public AddressBook deleteAddressBook(long addressBookId)
        throws PortalException, SystemException {
        return addressBookPersistence.remove(addressBookId);
    }

    /**
     * Deletes the address book from the database. Also notifies the appropriate model listeners.
     *
     * @param addressBook the address book
     * @return the address book that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public AddressBook deleteAddressBook(AddressBook addressBook)
        throws SystemException {
        return addressBookPersistence.remove(addressBook);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(AddressBook.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return addressBookPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.book.address.model.impl.AddressBookModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return addressBookPersistence.findWithDynamicQuery(dynamicQuery, start,
            end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.book.address.model.impl.AddressBookModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return addressBookPersistence.findWithDynamicQuery(dynamicQuery, start,
            end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return addressBookPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return addressBookPersistence.countWithDynamicQuery(dynamicQuery,
            projection);
    }

    @Override
    public AddressBook fetchAddressBook(long addressBookId)
        throws SystemException {
        return addressBookPersistence.fetchByPrimaryKey(addressBookId);
    }

    /**
     * Returns the address book with the matching UUID and company.
     *
     * @param uuid the address book's UUID
     * @param  companyId the primary key of the company
     * @return the matching address book, or <code>null</code> if a matching address book could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public AddressBook fetchAddressBookByUuidAndCompanyId(String uuid,
        long companyId) throws SystemException {
        return addressBookPersistence.fetchByUuid_C_First(uuid, companyId, null);
    }

    /**
     * Returns the address book matching the UUID and group.
     *
     * @param uuid the address book's UUID
     * @param groupId the primary key of the group
     * @return the matching address book, or <code>null</code> if a matching address book could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public AddressBook fetchAddressBookByUuidAndGroupId(String uuid,
        long groupId) throws SystemException {
        return addressBookPersistence.fetchByUUID_G(uuid, groupId);
    }

    /**
     * Returns the address book with the primary key.
     *
     * @param addressBookId the primary key of the address book
     * @return the address book
     * @throws PortalException if a address book with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public AddressBook getAddressBook(long addressBookId)
        throws PortalException, SystemException {
        return addressBookPersistence.findByPrimaryKey(addressBookId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return addressBookPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns the address book with the matching UUID and company.
     *
     * @param uuid the address book's UUID
     * @param  companyId the primary key of the company
     * @return the matching address book
     * @throws PortalException if a matching address book could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public AddressBook getAddressBookByUuidAndCompanyId(String uuid,
        long companyId) throws PortalException, SystemException {
        return addressBookPersistence.findByUuid_C_First(uuid, companyId, null);
    }

    /**
     * Returns the address book matching the UUID and group.
     *
     * @param uuid the address book's UUID
     * @param groupId the primary key of the group
     * @return the matching address book
     * @throws PortalException if a matching address book could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public AddressBook getAddressBookByUuidAndGroupId(String uuid, long groupId)
        throws PortalException, SystemException {
        return addressBookPersistence.findByUUID_G(uuid, groupId);
    }

    /**
     * Returns a range of all the address books.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.book.address.model.impl.AddressBookModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of address books
     * @param end the upper bound of the range of address books (not inclusive)
     * @return the range of address books
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<AddressBook> getAddressBooks(int start, int end)
        throws SystemException {
        return addressBookPersistence.findAll(start, end);
    }

    /**
     * Returns the number of address books.
     *
     * @return the number of address books
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getAddressBooksCount() throws SystemException {
        return addressBookPersistence.countAll();
    }

    /**
     * Updates the address book in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param addressBook the address book
     * @return the address book that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public AddressBook updateAddressBook(AddressBook addressBook)
        throws SystemException {
        return addressBookPersistence.update(addressBook);
    }

    /**
     * Returns the address book local service.
     *
     * @return the address book local service
     */
    public com.book.address.service.AddressBookLocalService getAddressBookLocalService() {
        return addressBookLocalService;
    }

    /**
     * Sets the address book local service.
     *
     * @param addressBookLocalService the address book local service
     */
    public void setAddressBookLocalService(
        com.book.address.service.AddressBookLocalService addressBookLocalService) {
        this.addressBookLocalService = addressBookLocalService;
    }

    /**
     * Returns the address book remote service.
     *
     * @return the address book remote service
     */
    public com.book.address.service.AddressBookService getAddressBookService() {
        return addressBookService;
    }

    /**
     * Sets the address book remote service.
     *
     * @param addressBookService the address book remote service
     */
    public void setAddressBookService(
        com.book.address.service.AddressBookService addressBookService) {
        this.addressBookService = addressBookService;
    }

    /**
     * Returns the address book persistence.
     *
     * @return the address book persistence
     */
    public AddressBookPersistence getAddressBookPersistence() {
        return addressBookPersistence;
    }

    /**
     * Sets the address book persistence.
     *
     * @param addressBookPersistence the address book persistence
     */
    public void setAddressBookPersistence(
        AddressBookPersistence addressBookPersistence) {
        this.addressBookPersistence = addressBookPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    /**
     * Returns the asset entry local service.
     *
     * @return the asset entry local service
     */
    public com.liferay.portlet.asset.service.AssetEntryLocalService getAssetEntryLocalService() {
        return assetEntryLocalService;
    }

    /**
     * Sets the asset entry local service.
     *
     * @param assetEntryLocalService the asset entry local service
     */
    public void setAssetEntryLocalService(
        com.liferay.portlet.asset.service.AssetEntryLocalService assetEntryLocalService) {
        this.assetEntryLocalService = assetEntryLocalService;
    }

    /**
     * Returns the asset entry remote service.
     *
     * @return the asset entry remote service
     */
    public com.liferay.portlet.asset.service.AssetEntryService getAssetEntryService() {
        return assetEntryService;
    }

    /**
     * Sets the asset entry remote service.
     *
     * @param assetEntryService the asset entry remote service
     */
    public void setAssetEntryService(
        com.liferay.portlet.asset.service.AssetEntryService assetEntryService) {
        this.assetEntryService = assetEntryService;
    }

    /**
     * Returns the asset entry persistence.
     *
     * @return the asset entry persistence
     */
    public AssetEntryPersistence getAssetEntryPersistence() {
        return assetEntryPersistence;
    }

    /**
     * Sets the asset entry persistence.
     *
     * @param assetEntryPersistence the asset entry persistence
     */
    public void setAssetEntryPersistence(
        AssetEntryPersistence assetEntryPersistence) {
        this.assetEntryPersistence = assetEntryPersistence;
    }

    /**
     * Returns the asset tag local service.
     *
     * @return the asset tag local service
     */
    public com.liferay.portlet.asset.service.AssetTagLocalService getAssetTagLocalService() {
        return assetTagLocalService;
    }

    /**
     * Sets the asset tag local service.
     *
     * @param assetTagLocalService the asset tag local service
     */
    public void setAssetTagLocalService(
        com.liferay.portlet.asset.service.AssetTagLocalService assetTagLocalService) {
        this.assetTagLocalService = assetTagLocalService;
    }

    /**
     * Returns the asset tag remote service.
     *
     * @return the asset tag remote service
     */
    public com.liferay.portlet.asset.service.AssetTagService getAssetTagService() {
        return assetTagService;
    }

    /**
     * Sets the asset tag remote service.
     *
     * @param assetTagService the asset tag remote service
     */
    public void setAssetTagService(
        com.liferay.portlet.asset.service.AssetTagService assetTagService) {
        this.assetTagService = assetTagService;
    }

    /**
     * Returns the asset tag persistence.
     *
     * @return the asset tag persistence
     */
    public AssetTagPersistence getAssetTagPersistence() {
        return assetTagPersistence;
    }

    /**
     * Sets the asset tag persistence.
     *
     * @param assetTagPersistence the asset tag persistence
     */
    public void setAssetTagPersistence(AssetTagPersistence assetTagPersistence) {
        this.assetTagPersistence = assetTagPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("com.book.address.model.AddressBook",
            addressBookLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "com.book.address.model.AddressBook");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return AddressBook.class;
    }

    protected String getModelClassName() {
        return AddressBook.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = addressBookPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
